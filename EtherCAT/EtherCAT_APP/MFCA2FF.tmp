/**
  ******************************************************************************
  * @file    EtherCAT.App.c
  * @author  
  * @version V1.1.0
  * @date    
  * @brief   实现EtherCAT应用功能
  */

#include "EtherCAT_App.h"
#include "Parameter.h"

#include <stdio.h>
#include "osal.h"

#include "ethercattype.h"
#include "nicdrv.h"
#include "ethercatbase.h"
#include "ethercatmain.h"
#include "ethercatdc.h"
#include "ethercatcoe.h"
#include "ethercatfoe.h"
#include "ethercatconfig.h"
#include "ethercatprint.h"

extern __IO uint8_t EthLinkStatus;													//标志网络链接状态

#define SYNC0TIME 2000																			//过程数据发送周期

char PDO_IOmap[1024] = {0};																	//过程数据缓冲区
int PDO_DorunFlag = 0;																			//允许过程数据传输标志

PDO_Output *PDO_OutPuts[SERVO_NODE_NUM] = {NULL};						//指向从机模式的TPDO数据地址
PDO_Input *PDO_InPuts[SERVO_NODE_NUM] = {NULL};							//指向从机模式的RPDO数据地址

PDO_Output PDO_TargetInf[SERVO_NODE_NUM] = {0};							//存放TPDO模式的TPDO数据

u8 startInterpMode = 0;																			//插补模式开始标志
u32 startInterpCounter = 0;																	//插补模式计数器

u8 startup_step = 0;																				//控制字切换标志

u8 pdoTimeFlag = 0;																					//链接完成后允许网络发送周期报文

u8 E_AllowUpdataSend = 0;																			//允许数据更新后发送

/**
  * @brief  通用定时器3中断初始化
  * @retval 无
  * @note   定时器3的时钟源为84M
  */
void TIM3_Config(void)
{
	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);  								//使能TIM3时钟
	
	TIM_TimeBaseInitStructure.TIM_Prescaler = 84 - 1;										//定时器分频
	TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up; 		//向上计数模式
	TIM_TimeBaseInitStructure.TIM_Period = SYNC0TIME - 1 ;							//自动重装载值
	TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1; 
	TIM_TimeBaseInitStructure.TIM_RepetitionCounter = 0;
	
	TIM_TimeBaseInit(TIM3,&TIM_TimeBaseInitStructure);
	
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
	
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn; 											//定时器3中断
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0; 					//抢占优先级1
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x03; 								//子优先级3
	NVIC_InitStructure.NVIC_IRQChannelCmd=ENABLE;
	
	NVIC_Init(&NVIC_InitStructure);
	
	TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
	TIM_ITConfig(TIM3,TIM_IT_Update,ENABLE); 															//允许定时器3更新中断
	TIM_Cmd(TIM3,ENABLE); 																								//使能定时器3
}

int PDO_ServoSetup(u16 slave)
{	
	  int retval = 0;
    u16 u16val = 0;
    u8  u8val = 0;
    u32 u32val = 0;
	
    u8val = 0;
    retval += ec_SDOwrite(slave, 0x1c12, 0x00, FALSE, sizeof(u8val), &u8val, EC_TIMEOUTRXM);
    u16val = 0x1600;
    retval += ec_SDOwrite(slave, 0x1c12, 0x01, FALSE, sizeof(u16val), &u16val, EC_TIMEOUTRXM);
    u8val = 1;
    retval += ec_SDOwrite(slave, 0x1c12, 0x00, FALSE, sizeof(u8val), &u8val, EC_TIMEOUTRXM);

	  u8val = 0;
    retval += ec_SDOwrite(slave, 0x1600, 0x00, FALSE, sizeof(u8val), &u8val, EC_TIMEOUTRXM);
	  u32val = 0x60400010;	//ControlWord，所有模式
    retval += ec_SDOwrite(slave, 0x1600, 0x01, FALSE, sizeof(u32val), &u32val, EC_TIMEOUTRXM);
		u32val = 0x607A0020;	//TargetPos，位置模式、插补模式
    retval += ec_SDOwrite(slave, 0x1600, 0x02, FALSE, sizeof(u32val), &u32val, EC_TIMEOUTRXM);
		u32val = 0x60810020;	//RunVelocity，位置模式
		retval += ec_SDOwrite(slave, 0x1600, 0x03, FALSE, sizeof(u32val), &u32val, EC_TIMEOUTRXM);
		u32val = 0x60FF0020;	//TarVelocity，速度模式
    retval += ec_SDOwrite(slave, 0x1600, 0x04, FALSE, sizeof(u32val), &u32val, EC_TIMEOUTRXM);
		u32val = 0x607C0020;	//originOffset,回零模式
//    retval += ec_SDOwrite(slave, 0x1600, 0x05, FALSE, sizeof(u32val), &u32val, EC_TIMEOUTRXM);
//		u32val = 0x60C10120;	//interpPos，插补模式
    retval += ec_SDOwrite(slave, 0x1600, 0x05, FALSE, sizeof(u32val), &u32val, EC_TIMEOUTRXM);
		u32val = 0x60980008;	//originMode，回零模式
    retval += ec_SDOwrite(slave, 0x1600, 0x06, FALSE, sizeof(u32val), &u32val, EC_TIMEOUTRXM);
		u32val = 0x60600008;	//ModeOfOperation，所有模式
    retval += ec_SDOwrite(slave, 0x1600, 0x07, FALSE, sizeof(u32val), &u32val, EC_TIMEOUTRXM);
//		u32val = 0x00000008;	//
//    retval += ec_SDOwrite(slave, 0x1600, 0x0B, FALSE, sizeof(u32val), &u32val, EC_TIMEOUTRXM);
		u8val = 0x07;
    retval += ec_SDOwrite(slave, 0x1600, 0x00, FALSE, sizeof(u8val), &u8val, EC_TIMEOUTRXM);
		
		
    u8val = 0;
    retval += ec_SDOwrite(slave, 0x1c13, 0x00, FALSE, sizeof(u8val), &u8val, EC_TIMEOUTRXM);
    u16val = 0x1a00;
    retval += ec_SDOwrite(slave, 0x1c13, 0x01, FALSE, sizeof(u16val), &u16val, EC_TIMEOUTRXM);
    u8val = 1;
    retval += ec_SDOwrite(slave, 0x1c13, 0x00, FALSE, sizeof(u8val), &u8val, EC_TIMEOUTRXM);
	  
		u8val = 0;
    retval += ec_SDOwrite(slave, 0x1a00, 0x00, FALSE, sizeof(u8val), &u8val, EC_TIMEOUTRXM);
	  u32val = 0x60410010;	//Status Word，所有模式
		retval += ec_SDOwrite(slave, 0x1a00, 0x01, FALSE, sizeof(u32val), &u32val, EC_TIMEOUTRXM);
	  u32val = 0x60400010;	//ControlWord，所有模式
    retval += ec_SDOwrite(slave, 0x1a00, 0x02, FALSE, sizeof(u32val), &u32val, EC_TIMEOUTRXM);
		u32val = 0x60640020;	//ActualPosition，所有模式
    retval += ec_SDOwrite(slave, 0x1a00, 0x03, FALSE, sizeof(u32val), &u32val, EC_TIMEOUTRXM);
		u32val = 0x606C0020;	//ActualVelocity，所有模式
    retval += ec_SDOwrite(slave, 0x1a00, 0x04, FALSE, sizeof(u32val), &u32val, EC_TIMEOUTRXM);
	 	u32val = 0x60610008;	//ModeOfOperationDisplay，所有模式
    retval += ec_SDOwrite(slave, 0x1a00, 0x05, FALSE, sizeof(u32val), &u32val, EC_TIMEOUTRXM);
		u32val = 0x60980008;	//originMode，回零模式
    retval += ec_SDOwrite(slave, 0x1a00, 0x06, FALSE, sizeof(u32val), &u32val, EC_TIMEOUTRXM);
//		u32val = 0x00000008;	//
//    retval += ec_SDOwrite(slave, 0x1a00, 0x05, FALSE, sizeof(u32val), &u32val, EC_TIMEOUTRXM);
		u8val = 6;
    retval += ec_SDOwrite(slave, 0x1a00, 0x00, FALSE, sizeof(u8val), &u8val, EC_TIMEOUTRXM);
		
    return 1;
}

/*EtherCAT周期性收发数据*/
void EtherCAT_SendData(void)
{
	u16 i = 0;
	
	ec_receive_processdata(EC_TIMEOUTRET);
	
	for(i=1; i<=ec_slavecount; i++)
	{
		PDO_Actual_Status[i] = PDO_InPuts[i]->StatusWord;
		PDO_Cur_Position[i] = PDO_InPuts[i]->CurrentPosition / Axsis_ParPosChange;
	}
	
	if(E_AllowUpdataSend == E_ALLOW_UPDATA_SEND_EN)
	{
		for(i=1; i<=ec_slavecount; i++)
		{
			/*控制方式*/
			PDO_OutPuts[i]->TargetMode = PDO_TargetInf[i].TargetMode;
			
			/*控制字*/
			PDO_OutPuts[i]->ControlWord = PDO_TargetInf[i].ControlWord;
			
			/*位置模式*/
			PDO_OutPuts[i]->RunVelocity = PDO_TargetInf[i].RunVelocity;
			PDO_OutPuts[i]->TargetPos = PDO_TargetInf[i].TargetPos;
			/*速度模式*/
			PDO_OutPuts[i]->TarVelocity = PDO_TargetInf[i].TarVelocity;
			/*原点回归模式*/
			PDO_OutPuts[i]->originOffset = PDO_TargetInf[i].originOffset;
			PDO_OutPuts[i]->originMode = PDO_TargetInf[i].originMode;
			/*插补位置模式*/
//			PDO_OutPuts[i]->interpPos = PDO_TargetInf[i].interpPos;
		}
		
		E_AllowUpdataSend = E_ALLOW_UPDATA_SEND_DIS;
	}
	
	ec_send_processdata();
	ec_pdo_outframe();
}

void EtherCATInit(char *ifname)
{
	int i, slc;
	
  PDO_DorunFlag = 0;
	
	if(ec_init(ifname))//初始化SOEM，socket绑定到ifname（网卡名称）		
	{
		if(ec_config_init(TRUE) > 0)//确定从机个数
		{
			if((ec_slavecount >= 1))
			{
				for(slc = 1; slc <= ec_slavecount; slc++)
				{
					ec_slave[slc].PO2SOconfig = &PDO_ServoSetup;
				}
			}

			ec_set_pdo_queue(ec_config_map(&PDO_IOmap),3);
			ec_configdc(); //DC时钟配置
			ec_dcsync0(1, TRUE, SYNC0TIME, 250000); // SYNC0 on slave 1
			Delay_ms(100);
//			ec_config_map(&PDO_IOmap);
//			ec_configdc(); //DC时钟配置

			/* wait for all slaves to reach SAFE_OP state */
			ec_statecheck(0, EC_STATE_SAFE_OP,  EC_TIMEOUTSTATE * 4);
			
			/* read indevidual slave state and store in ec_slave[] */
			ec_readstate();
			Delay_ms(2000);//延时必须达到这个时间，否则电机使能有问题
			
			ec_slave[0].state = EC_STATE_OPERATIONAL;
			
			/* send one valid process data to make outputs in slaves happy*/
			ec_send_processdata();
			ec_receive_processdata(EC_TIMEOUTRET);
			
			/* request OP state for all slaves */
			ec_writestate(0);
			
			/* wait for all slaves to reach OP state */
			ec_statecheck(0, EC_STATE_OPERATIONAL,  EC_TIMEOUTSTATE * 4);
			ec_readstate();
			
			/* wait for all slaves to reach OP state */
//			ec_receive_processdata(EC_TIMEOUTRET);
//			for(slc = 0; slc <= ec_slavecount; slc++)
//			{
//				ec_statecheck(slc, EC_STATE_OPERATIONAL, 50000);
//			}
			
//			while(1)
//			{
//				for(slc = 0; slc <= ec_slavecount; slc++)
//				{
//					if(ec_slave[slc].state != EC_STATE_OPERATIONAL)
//					{
//						break;
//					}
//				}
//				if(slc > ec_slavecount)
//				{
//					break;
//				}
//				
//				ec_receive_processdata(EC_TIMEOUTRET);
//				for(slc = 0; slc <= ec_slavecount; slc++)
//				{
//					ec_statecheck(slc, EC_STATE_OPERATIONAL, 50000);
//				}
//			}
			
			if (ec_slave[1].state == EC_STATE_OPERATIONAL)
			{
				for(slc = 1; slc <= ec_slavecount; slc++)
				{
					PDO_OutPuts[slc] = (PDO_Output *)ec_slave[slc].outputs;
					PDO_InPuts[slc]  = (PDO_Input *)ec_slave[slc].inputs;
				}
								
				/*初始化当前变量*/
				for(slc = 1; slc <= ec_slavecount; slc++)
				{
					PDO_TargetInf[slc].TargetMode = 0x01;		//默认位置模式
					
					PDO_TargetInf[slc].RunVelocity = 0;			//速度设置
					PDO_TargetInf[slc].TargetPos = 0;				//目标位置
					
					PDO_TargetInf[slc].TarVelocity = 0;
					
					PDO_TargetInf[slc].originMode = 0;
					PDO_TargetInf[slc].originOffset = 0;
					
					//PDO_TargetInf[slc].interpPos = 0;
					
					Servo_ConnectSta[slc - 1] = 1;					//确定已连接的伺服器
					ServoNodeID[slc] = slc;									//确定ID
				}
				ServoNodeID[0] = 0;
				
				//PDO_DorunFlag = 1;
				
				ec_send_processdata();
			ec_receive_processdata(EC_TIMEOUTRET);
				
				ec_send_processdata();
			ec_receive_processdata(EC_TIMEOUTRET);
				
				ec_send_processdata();
			ec_receive_processdata(EC_TIMEOUTRET);
				
				E_AllowUpdataSend = E_ALLOW_UPDATA_SEND_EN;
				while(E_AllowUpdataSend == E_ALLOW_UPDATA_SEND_EN);
			}
			else
			{}
		}
		else
		{}
	}
	else
	{}
	
	if(PDO_DorunFlag == 0)
	{
		ec_slave[0].state = EC_STATE_INIT;
		ec_writestate(0);
		ec_close();
	}
}   

/**
  * @brief  定时器3中断服务函数
  * @param  无
  * @retval 无
  */
void TIM3_IRQHandler(void)
{
	if(TIM_GetITStatus(TIM3,TIM_IT_Update)==SET) //溢出中断
	{
		if(PDO_DorunFlag == 1)
		{
		  EtherCAT_SendData();
		}
		else
		{
			ec_send_processdata();
			ec_pdo_outframe();
		}
	}
	
	TIM_ClearITPendingBit(TIM3,TIM_IT_Update);  //清除中断标志位
}

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
